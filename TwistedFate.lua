--  Clarity Twisted Fate 1.4



assert(load(Base64Decode(
"
--[[Twisted Fate by Team Clarity]]



if myHero.charName ~= 'TwistedFate' then return end

assert(load(Base64Decode("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"), nil, "bt", _ENV))() ScriptStatus("TGJIFMFKGMN") 

--draws Q+W enemy HPbar
--lag free circles
--draws and alert u if someone is gankable
--combo logic 
--change card from red to blue if low mana in farm mode
--auto gold card when uld
--ks with q and w
--R range in the mini map

--needs auto zhonya

require "SxOrbWalk"
require "VPrediction"

local AA = Aa
local Q = {range = 1200, delay = 0.25, speed = 1500, width = 80,IsReady = function() return myHero:CanUseSpell(_Q) == READY end}
local W = {range = 525, delay = 0.25, speed = math.huge, width = 200,IsReady = function() return myHero:CanUseSpell(_W) == READY end}
local E = {range = 650, IsReady = function() return myHero:CanUseSpell(_E) == READY end}
local R = {range = 5500, IsReady = function() return myHero:CanUseSpell(_R) == READY end}
local ignite = nil
local iDmg = 0
local informationTable = {}
local spellExpired = true
local AntiSpam = 0
local UltPerc = 0.3
local ts
local ts = TargetSelector(TARGET_LESS_CAST_PRIORITY, 1300, DAMAGE_MAGIC, true)
local myTarget = nil
local Killable = false
local LastAlert = 0


local ToInterrupt = {}
local InterruptList = {
    { charName = "Caitlyn", spellName = "CaitlynAceintheHole"},
    { charName = "FiddleSticks", spellName = "Crowstorm"},
    { charName = "FiddleSticks", spellName = "DrainChannel"},
    { charName = "Galio", spellName = "GalioIdolOfDurand"},
    { charName = "Karthus", spellName = "FallenOne"},
    { charName = "Katarina", spellName = "KatarinaR"},
    { charName = "Lucian", spellName = "LucianR"},
    { charName = "Malzahar", spellName = "AlZaharNetherGrasp"},
    { charName = "MissFortune", spellName = "MissFortuneBulletTime"},
    { charName = "Nunu", spellName = "AbsoluteZero"},                            
    { charName = "Pantheon", spellName = "Pantheon_GrandSkyfall_Jump"},
    { charName = "Shen", spellName = "ShenStandUnited"},
    { charName = "Urgot", spellName = "UrgotSwap2"},
    { charName = "Varus", spellName = "VarusQ"},
	{ charName = "Warwick", spellName = "InfiniteDuress"},
	{ charName = "Velkoz", spellName = "VelkozR"}
}



TextList = {"", "Dead Man Walking!"}
KillText = {}
colorText = ARGB(255,255,204,0)


function GetCustomTarget()
	ts:update()
	if _G.AutoCarry and ValidTarget(_G.AutoCarry.Crosshair:GetTarget()) then return _G.AutoCarry.Crosshair:GetTarget() end
	if not _G.Reborn_Loaded then return ts.target end
	return ts.target
end

function OnLoad()
	PrintChat("<font color=\"#00FF00\">Twisted Fate by Team Clarity.</font>")
	ItemNames				= {
		[3303]				= "ArchAngelsDummySpell",
		[3007]				= "ArchAngelsDummySpell",
		[3144]				= "BilgewaterCutlass",
		[3188]				= "ItemBlackfireTorch",
		[3153]				= "ItemSwordOfFeastAndFamine",
		[3405]				= "TrinketSweeperLvl1",
		[3411]				= "TrinketOrbLvl1",
		[3166]				= "TrinketTotemLvl1",
		[3450]				= "OdinTrinketRevive",
		[2041]				= "ItemCrystalFlask",
		[2054]				= "ItemKingPoroSnack",
		[2138]				= "ElixirOfIron",
		[2137]				= "ElixirOfRuin",
		[2139]				= "ElixirOfSorcery",
		[2140]				= "ElixirOfWrath",
		[3184]				= "OdinEntropicClaymore",
		[2050]				= "ItemMiniWard",
		[3401]				= "HealthBomb",
		[3363]				= "TrinketOrbLvl3",
		[3092]				= "ItemGlacialSpikeCast",
		[3460]				= "AscWarp",
		[3361]				= "TrinketTotemLvl3",
		[3362]				= "TrinketTotemLvl4",
		[3159]				= "HextechSweeper",
		[2051]				= "ItemHorn",
		--[2003]			= "RegenerationPotion",
		[3146]				= "HextechGunblade",
		[3187]				= "HextechSweeper",
		[3190]				= "IronStylus",
		[2004]				= "FlaskOfCrystalWater",
		[3139]				= "ItemMercurial",
		[3222]				= "ItemMorellosBane",
		[3042]				= "Muramana",
		[3043]				= "Muramana",
		[3180]				= "OdynsVeil",
		[3056]				= "ItemFaithShaker",
		[2047]				= "OracleExtractSight",
		[3364]				= "TrinketSweeperLvl3",
		[2052]				= "ItemPoroSnack",
		[3140]				= "QuicksilverSash",
		[3143]				= "RanduinsOmen",
		[3074]				= "ItemTiamatCleave",
		[3800]				= "ItemRighteousGlory",
		[2045]				= "ItemGhostWard",
		[3342]				= "TrinketOrbLvl1",
		[3040]				= "ItemSeraphsEmbrace",
		[3048]				= "ItemSeraphsEmbrace",
		[2049]				= "ItemGhostWard",
		[3345]				= "OdinTrinketRevive",
		[2044]				= "SightWard",
		[3341]				= "TrinketSweeperLvl1",
		[3069]				= "shurelyascrest",
		[3599]				= "KalistaPSpellCast",
		[3185]				= "HextechSweeper",
		[3077]				= "ItemTiamatCleave",
		[2009]				= "ItemMiniRegenPotion",
		[2010]				= "ItemMiniRegenPotion",
		[3023]				= "ItemWraithCollar",
		[3290]				= "ItemWraithCollar",
		[2043]				= "VisionWard",
		[3340]				= "TrinketTotemLvl1",
		[3090]				= "ZhonyasHourglass",
		[3154]				= "wrigglelantern",
		[3142]				= "YoumusBlade",
		[3157]				= "ZhonyasHourglass",
		[3512]				= "ItemVoidGate",
		[3131]				= "ItemSoTD",
		[3137]				= "ItemDervishBlade",
		[3352]				= "RelicSpotter",
		[3350]				= "TrinketTotemLvl2",
	}
	_G.ITEM_1				= 06
	_G.ITEM_2				= 07
	_G.ITEM_3				= 08
	_G.ITEM_4				= 09
	_G.ITEM_5				= 10
	_G.ITEM_6				= 11
	_G.ITEM_7				= 12
	
	___GetInventorySlotItem	= rawget(_G, "GetInventorySlotItem")
	_G.GetInventorySlotItem	= GetSlotItem
	
	checkDistance = 3000 * 3000
	IgniteCheck()
	FLoadLib()
	VP = VPrediction(true)   
    _G.oldDrawCircle = rawget(_G, 'DrawCircle')
	_G.DrawCircle = DrawCircle2
	
	Minions = minionManager(MINION_ENEMY, Q.range, myHero, MINION_SORT_MAXHEALTH_ASC)
	JungleMinions = minionManager(MINION_JUNGLE, Q.range, myHero, MINION_SORT_MAXHEALTH_DEC)
end

function OnTick()
	target = GetCustomTarget()
	Checks()
	
	
--[[ if (SxOrb) then
    if HazMenu.Combo.disableAA then
	    if HazMenu.combokey then
           SxOrb:DisableAttacks()
 
        elseif (_G.AutoCarry and _G.AutoCarry.MyHero) then
          _G.AutoCarry.MyHero:AttacksEnabled(false)
        end
	end
end]]
	  
   
end

function OnDraw()
	if HazMenu.Draw.drawq then
		DrawCircle(myHero.x,myHero.y,myHero.z,1200,0xFFFF0000)
	end 			
	if HazMenu.Draw.draww then
		DrawCircle(myHero.x,myHero.y,myHero.z,525,0xFFFF0000)
	end
	if HazMenu.Draw.drawr then
		DrawCircleMinimap(myHero.x,myHero.y,myHero.z,5500)
	end
	
	if  HazMenu.Draw.drawHP then
			for i, enemy in ipairs(GetEnemyHeroes()) do
       			if ValidTarget(enemy) then
			       DrawIndicator(enemy)
			    end
	        end
	end		
	
	if HazMenu.Misc.killtext then
		for i = 1, heroManager.iCount do
			local target = heroManager:GetHero(i)
			if ValidTarget(target) and target ~= nil then
			    if R.IsReady() and GetDistance(target, myHero) <= 5500 then
				local barPos = WorldToScreen(D3DXVECTOR3(myHero.x, myHero.y, myHero.z))
				local PosX = barPos.x - 35
				local PosY = barPos.y - 10
				
				DrawText(TextList[KillText[i]], 25, PosX, PosY, colorText)
			    end
			    if R.IsReady() and GetDistance(target, myHero) <= 7500 then
				local barPos = WorldToScreen(D3DXVECTOR3(target.x, target.y, target.z))
				local PosX = barPos.x - 35
				local PosY = barPos.y - 10
				
				DrawText(TextList[KillText[i]], 20, PosX, PosY, colorText)
			    end
			end
		end
	end   
end


function Checks()
	IREADY = (ignite ~= nil and myHero:CanUseSpell(ignite) == READY)
	QREADY = (myHero:CanUseSpell(_Q) == READY)
	WREADY = (myHero:CanUseSpell(_W) == READY)
	EREADY = (myHero:CanUseSpell(_E) == READY)
	RREADY = (myHero:CanUseSpell(_R) == READY)
	calcDmg()
	LFCfunc()
	SpellExpired()
	
	if ValidTarget(target) then
		if HazMenu.Misc.KS then KS(target) end
		if HazMenu.Misc.Ignite then AutoIgnite(target) end
	    if HazMenu.Combo.comboR then KS(target) end
	   
	end
	
	if HazMenu.Misc.zhonya then 
    Zhonya()
    end	
	if HazMenu.Farm.Mana then end
	if HazMenu.Harass.Mana then end
	if HazMenu.combokey then
		Combo()
    end
	
   if HazMenu.harasskey then
		Poke()
   end
   if HazMenu.farmkey then
		Farm()
   end
    if HazMenu.Keys.goldcard and not HazMenu.Keys.redcard and not HazMenu.Keys.bluecard then
        castWg()		
	elseif HazMenu.Keys.redcard and not HazMenu.Keys.goldcard and not HazMenu.Keys.bluecard then
	    castWred()
	elseif HazMenu.Keys.bluecard and not HazMenu.Keys.goldcard and not HazMenu.Keys.redcard then	
	    castWbluefarm()
	end	
    --if HazMenu.redcard then
	    --castWred()
	--end
    --if HazMenu.bluecard then
        --castWbluefarm()
    --end		
end

function IgniteCheck()
	if myHero:GetSpellData(SUMMONER_1).name:find("summonerdot") then
		ignite = SUMMONER_1
	elseif myHero:GetSpellData(SUMMONER_2).name:find("summonerdot") then
		ignite = SUMMONER_2
	end
end

function FLoadLib()
	FMenu()
end

function FMenu()
	HazMenu = scriptConfig("Clarity Twisted Fate", "Twisted Fate")
		HazMenu:addParam("combokey", "Combo key(Space)", SCRIPT_PARAM_ONKEYDOWN, false, 32)
		HazMenu:addParam("harasskey", "Harass key(C)", SCRIPT_PARAM_ONKEYDOWN, false, string.byte("C"))
		HazMenu:addParam("farmkey", "Farm key(V)", SCRIPT_PARAM_ONKEYDOWN, false, string.byte("V"))
	    
	    
		 
	
	HazMenu:addTS(ts)
		
	HazMenu:addSubMenu("Combo", "Combo")
		HazMenu.Combo:addParam("comboQ", "Use Q", SCRIPT_PARAM_ONOFF, true)
		HazMenu.Combo:addParam("comboW", "Use W", SCRIPT_PARAM_ONOFF, true)
		HazMenu.Combo:addParam("comboR", "Auto Gold card on R", SCRIPT_PARAM_ONOFF, true)
		HazMenu.Combo:addParam("stunQ", "Use Q only if stun", SCRIPT_PARAM_ONOFF, true)
		--HazMenu.Combo:addParam("disableAA", "Disable AA in Combo", SCRIPT_PARAM_ONOFF, true)
		
   	HazMenu:addSubMenu("Harass", "Harass")
		HazMenu.Harass:addParam("harassQ", "Use Q", SCRIPT_PARAM_ONOFF, true)		
		HazMenu.Harass:addParam("harassW", "Use W", SCRIPT_PARAM_ONOFF, true)
	    HazMenu.Harass:addParam("Mana", "Mana Manager %", SCRIPT_PARAM_SLICE, 50, 1, 100, 0)
	
	HazMenu:addSubMenu("Keys", "Keys")
	    HazMenu.Keys:addParam("goldcard", "Pick a Gold Card (A)", SCRIPT_PARAM_ONKEYDOWN, false, string.byte("A"))
		HazMenu.Keys:addParam("redcard", "Pick a Red Card (8)", SCRIPT_PARAM_ONKEYDOWN, false, string.byte("8"))
		HazMenu.Keys:addParam("bluecard", "Pick a Blue Card (9)", SCRIPT_PARAM_ONKEYDOWN, false, string.byte("9")) 
	
	
    HazMenu:addSubMenu("Farm", "Farm")
	    HazMenu.Farm:addParam("farmQ", "Use Q", SCRIPT_PARAM_ONOFF, true)
		HazMenu.Farm:addParam("farmW", "Use W", SCRIPT_PARAM_ONOFF, true)
	    HazMenu.Farm:addParam("Mana", "Mana Manager %", SCRIPT_PARAM_SLICE, 50, 1, 100, 0)
	
	HazMenu:addSubMenu("Misc", "Misc")
		HazMenu.Misc:addParam("KS", "KillSteal with Q", SCRIPT_PARAM_ONOFF, true)
		HazMenu.Misc:addParam("Ignite", "Use Auto Ignite", SCRIPT_PARAM_ONOFF, true)
	    HazMenu.Misc:addParam("killtext", "Draw who to gank", SCRIPT_PARAM_ONOFF, true)
		HazMenu.Misc:addParam("zhonya", "Auto Zhonyas", SCRIPT_PARAM_ONOFF, true)
	    HazMenu.Misc:addParam("zhonyaHP", "Use Zhonyas at % health", SCRIPT_PARAM_SLICE, 20, 0, 100 , 0)
		HazMenu.Misc:addParam("Amount", "Zhonya if x Enemies", SCRIPT_PARAM_SLICE, 1, 0, 5, 0)
		
	HazMenu:addSubMenu("Draw","Draw")
	  HazMenu.Draw:addParam("drawq", "Draw Q", SCRIPT_PARAM_ONOFF, true)
	  HazMenu.Draw:addParam("draww", "Draw W", SCRIPT_PARAM_ONOFF, true)
	  HazMenu.Draw:addParam("drawr", "Draw R", SCRIPT_PARAM_ONOFF, true)
	  HazMenu.Draw:addParam("drawHP", "Draw Dmg on HPBar", SCRIPT_PARAM_ONOFF, true)
	  
	  
	HazMenu:addParam("AGP", "Auto W gapclosers", SCRIPT_PARAM_ONOFF, true)	
	HazMenu:addParam("Interrupt", "interrupt with W", SCRIPT_PARAM_ONOFF, true)
	
	
	HazMenu:addSubMenu("LagFreeCircles", "LFC")
	  HazMenu.LFC:addParam("LagFree", "Activate Lag Free Circles", SCRIPT_PARAM_ONOFF, false)
	  HazMenu.LFC:addParam("CL", "Length before Snapping", SCRIPT_PARAM_SLICE, 350, 75, 2000, 0)
	  HazMenu.LFC:addParam("CLinfo", "Higher length = Lower FPS Drops", SCRIPT_PARAM_INFO, "")
	
	for i = 1, heroManager.iCount, 1 do
		local enemy = heroManager:getHero(i)
		if enemy.team ~= myHero.team then
			for _, champ in pairs(InterruptList) do
				if enemy.charName == champ.charName then
					table.insert(ToInterrupt, champ.spellName)
				end
			end
		end
	end
	
	if _G.Reborn_Loaded then
	DelayAction(function()
		PrintChat("<font color = \"#FFFFFF\">[Twisted Fate] </font><font color = \"#FF0000\">SAC Status:</font> <font color = \"#FFFFFF\">Successfully integrated.</font> </font>")
		HazMenu:addParam("SACON","[Twisted Fate] SAC:R support is active.", 5, "")
		isSAC = true
	end, 10)
	elseif not _G.Reborn_Loaded then
		PrintChat("<font color = \"#FFFFFF\">[Twisted Fate] </font><font color = \"#FF0000\">Orbwalker not found:</font> <font color = \"#FFFFFF\">SxOrbWalk integrated.</font> </font>")
		HazMenu:addSubMenu("Orbwalker", "SxOrb")
		SxOrb:LoadToMenu(HazMenu.SxOrb)
		isSX = true
	end
	HazMenu:permaShow("combokey")
	HazMenu:permaShow("harasskey")
	HazMenu:permaShow("farmkey")
end



function KS(enemy)  
	if Q.IsReady() and getDmg("Q", enemy, myHero) > enemy.health then
		if GetDistance(enemy) <= Q.range and HazMenu.Misc.KS then 
			local CastPosition, HitChance, CastPos = VP:GetLineCastPosition(target, Q.delay, Q.width, Q.range, Q.speed, myHero, false)
			if HitChance >= 2 and GetDistance(CastPosition) <= Q.range and GetDistance(CastPosition) >= 700 and Q.IsReady() then
				CastSpell(_Q, CastPosition.x, CastPosition.z)
		    end
		end
	end
    if W.IsReady() and getDmg("W", enemy, myHero) > enemy.health then
	    if GetDistance(enemy) <= W.range then
		  castW()
		end
	end	
end

function AutoIgnite(enemy)
  	iDmg = ((IREADY and getDmg("IGNITE", enemy, myHero)) or 0) 
	if enemy.health <= iDmg and GetDistance(enemy) <= 600 and ignite ~= nil
		then
			if IREADY then CastSpell(ignite, enemy) end
	end
end


--Big TNX to Manciuzz for this part


function OnProcessSpell(unit, spell)   
	if HazMenu.Interrupt and W.IsReady() and #ToInterrupt > 0 then
		for _, ability in pairs(ToInterrupt) do
			if spell.name == ability and unit.team ~= myHero.team then
				if GetDistance(unit) <= 525 then castW() end
			end
		end
	end
	if HazMenu.AGP and E.IsReady() then
	        local jarvanAddition = unit.charName == "JarvanIV" and unit:CanUseSpell(_Q) ~= READY and _R or _Q
			local isAGapcloserUnit = {
				['Aatrox']      = {true, spell = _Q,                  range = 1000,  projSpeed = 1200, },
				['Akali']       = {true, spell = _R,                  range = 800,   projSpeed = 2200, }, 
				['Alistar']     = {true, spell = _W,                  range = 650,   projSpeed = 2000, }, 
				['Diana']       = {true, spell = _R,                  range = 825,   projSpeed = 2000, }, 
				['Gragas']      = {true, spell = _E,                  range = 600,   projSpeed = 2000, },
				['Hecarim']     = {true, spell = _R,                  range = 1000,  projSpeed = 1200, },
				['Irelia']      = {true, spell = _Q,                  range = 650,   projSpeed = 2200, }, 
				['JarvanIV']    = {true, spell = jarvanAddition,      range = 770,   projSpeed = 2000, }, 
				['Jax']         = {true, spell = _Q,                  range = 700,   projSpeed = 2000, }, 
				['Jayce']       = {true, spell = 'JayceToTheSkies',   range = 600,   projSpeed = 2000, }, 
				['Khazix']      = {true, spell = _E,                  range = 900,   projSpeed = 2000, },
				['Leblanc']     = {true, spell = _W,                  range = 600,   projSpeed = 2000, },
				['LeeSin']      = {true, spell = 'blindmonkqtwo',     range = 1300,  projSpeed = 1800, },
				['Leona']       = {true, spell = _E,                  range = 900,   projSpeed = 2000, },
				['Malphite']    = {true, spell = _R,                  range = 1000,  projSpeed = 1500 + unit.ms},
				['Maokai']      = {true, spell = _Q,                  range = 600,   projSpeed = 1200, }, 
				['MonkeyKing']  = {true, spell = _E,                  range = 650,   projSpeed = 2200, }, 
				['Pantheon']    = {true, spell = _W,                  range = 600,   projSpeed = 2000, }, 
				['Poppy']       = {true, spell = _E,                  range = 525,   projSpeed = 2000, }, 
				['Renekton']    = {true, spell = _E,                  range = 450,   projSpeed = 2000, },
				['Sejuani']     = {true, spell = _Q,                  range = 650,   projSpeed = 2000, },
				['Shen']        = {true, spell = _E,                  range = 575,   projSpeed = 2000, },
				['Tristana']    = {true, spell = _W,                  range = 900,   projSpeed = 2000, },
				['Tryndamere']  = {true, spell = 'Slash',             range = 650,   projSpeed = 1450, },
				['XinZhao']     = {true, spell = _E,                  range = 650,   projSpeed = 2000, }, 
			}
			if unit.type == myHero.type and unit.team ~= myHero.team and isAGapcloserUnit[unit.charName] and GetDistance(unit) < 2000 and spell ~= nil then
				if spell.name == (type(isAGapcloserUnit[unit.charName].spell) == 'number' and unit:GetSpellData(isAGapcloserUnit[unit.charName].spell).name or isAGapcloserUnit[unit.charName].spell) then
					if spell.target ~= nil and spell.target.isMe or isAGapcloserUnit[unit.charName].spell == 'blindmonkqtwo' then
						if W.IsReady() then
							W.target = unit
							castW()
						end
					else
						spellExpired = false
						informationTable = {
							spellSource = unit,
							spellCastedTick = GetTickCount(),
							spellStartPos = Point(spell.startPos.x, spell.startPos.z),
							spellEndPos = Point(spell.endPos.x, spell.endPos.z),
							spellRange = isAGapcloserUnit[unit.charName].range,
							spellSpeed = isAGapcloserUnit[unit.charName].projSpeed
						}
					end
				end
			end
		
    end
    if unit.isMe and spell.name == "Destiny" then 
    	castWg()
    elseif unit.isMe and spell.name == "gate" then
	    castWg()
    end
end			



function SpellExpired()
	if HazMenu.AGP and not spellExpired and (GetTickCount() - informationTable.spellCastedTick) <= (informationTable.spellRange / informationTable.spellSpeed) * 1000 then
		local spellDirection     = (informationTable.spellEndPos - informationTable.spellStartPos):normalized()
		local spellStartPosition = informationTable.spellStartPos + spellDirection
		local spellEndPosition   = informationTable.spellStartPos + spellDirection * informationTable.spellRange
		local heroPosition = Point(myHero.x, myHero.z)
		local lineSegment = LineSegment(Point(spellStartPosition.x, spellStartPosition.y), Point(spellEndPosition.x, spellEndPosition.y))
	
			local lineSegment = LineSegment(Point(spellStartPosition.x, spellStartPosition.y), Point(spellEndPosition.x, spellEndPosition.y))
			

			if lineSegment:distance(heroPosition) <= 300 and W.IsReady() then
				W.target = unit
				castW()
			end

		else
			spellExpired = true
			informationTable = {}
		end
        
               
               
    
end


--combo-----------------------------------------------------------------------------------------------------------------


function Combo()
	if ValidTarget(target) then
        	if W.IsReady() and HazMenu.Combo.comboW then
			    if GetDistance(myHero, target) <=  E.range then
			     castW()
			    end
			end
			if HazMenu.Combo.stunQ then	
                if Q.IsReady() and HazMenu.Combo.comboQ then
				  
			        local CastPosition, HitChance, CastPos = VP:GetLineCastPosition(target, Q.delay, Q.width, Q.range, Q.speed, myHero, false)
			        if HitChance >= 3 and GetDistance(CastPosition) <= Q.range then
				 --if HazMenu.Misc.Pak and VIP_USER then
				     --packetCast(_Q, CastPosition.x, CastPosition.z)
					--else
				        CastSpell(_Q, CastPosition.x, CastPosition.z)
				--end	 
			        end
		          
				end	
			elseif not HazMenu.Combo.stunQ then
			     if Q.IsReady() and HazMenu.Combo.comboQ then
			        local CastPosition, HitChance, CastPos = VP:GetLineCastPosition(target, Q.delay, Q.width, Q.range, Q.speed, myHero, false)
			        if HitChance >= 2 and GetDistance(CastPosition) <= Q.range then
				 --if HazMenu.Misc.Pak and VIP_USER then
				     --packetCast(_Q, CastPosition.x, CastPosition.z)
					--else
				        CastSpell(_Q, CastPosition.x, CastPosition.z)
				--end	 
			        end
		        end	
			end	
	end
end


--harass------------------------------------------------------------------------------------------------------------



function Poke()
	if ValidTarget(target) then 
		if Q.IsReady() and HazMenu.Harass.harassQ and myHero.mana / myHero.maxMana > HazMenu.Harass.Mana /100 then 
		    local CastPosition, HitChance, CastPos = VP:GetLineCastPosition(target, Q.delay, Q.width, Q.range, Q.speed, myHero, false)
			if HitChance >= 2 and GetDistance(CastPosition) <= Q.range then
				 --if HazMenu.Misc.Pak and VIP_USER then
				     --packetCast(_Q, CastPosition.x, CastPosition.z)
					--else
				    CastSpell(_Q, CastPosition.x, CastPosition.z)
				--end
			end
		end
		if W.IsReady() and HazMenu.Harass.harassW then
		    if myHero.mana / myHero.maxMana > HazMenu.Harass.Mana /100 then
		       if GetDistance(myHero, Minion) <= W.range then
			     castW()
			    end
   		    else
			   if GetDistance(myHero, Minion) <= W.range then
			     castWblue()
			   end
		    end
	    end
    end
end



--farm--------------------------------------------------------------------------------------------------------------------



function Farm()
	Minions:update()
	
	for i, Minion in pairs(Minions.objects) do
		if Q.IsReady() and HazMenu.Farm.farmQ and #Minions.objects > 2 then
			if myHero.mana / myHero.maxMana > HazMenu.Farm.Mana /100 then
			    if ValidTarget(Minion) then
			        local AOECastPosition, MainTargetHitChance, nTargets = VP:GetLineAOECastPosition(Minion, Q.delay, Q.width, 750, Q.speed, myHero)
			        if nTargets >= 1 and Q.IsReady() then
			           CastSpell(_Q, AOECastPosition.x, AOECastPosition.z)
			        end
				end	
			end
   		end
		if  W.IsReady() and HazMenu.Farm.farmW then
		    if myHero.mana / myHero.maxMana > HazMenu.Farm.Mana /100 then
		       if GetDistance(myHero, Minion) <= W.range then
			     castWred()
			    end
   		    else
			   if GetDistance(myHero, Minion) <= W.range then
			     castWbluefarm()
			   end
		    end
	    end
	end	
    JungleMinions:update()
	for i, Minion in pairs(JungleMinions.objects) do
	    if Q.IsReady() and HazMenu.Farm.farmQ then
			if myHero.mana / myHero.maxMana > HazMenu.Farm.Mana /100 then
			    local AOECastPosition, MainTargetHitChance, nTargets = VP:GetLineAOECastPosition(Minion, Q.delay, Q.width, E.range, Q.speed, myHero)
			     if nTargets >= 1 then
			        CastSpell(_Q, AOECastPosition.x, AOECastPosition.z)
			    end
			end
   		end
		if  W.IsReady() and HazMenu.Farm.farmW then
		    if myHero.mana / myHero.maxMana > HazMenu.Farm.Mana /100 then
		       if GetDistance(myHero, Minion) <= W.range then
			     castWred()
			    end
   		    else
			   if GetDistance(myHero, Minion) <= W.range then
			     castWbluefarm()
			   end
		    end
	    end
	end	
end





function castQ()
    if ValidTarget(Target) and HazMenu.qpoke then
   	    if Q.IsReady() then
	        local CastPosition, HitChance, CastPos = VP:GetLineCastPosition(target, Q.delay, Q.width, Q.range, Q.speed, myHero, false)
			if HitChance >= 2 and GetDistance(CastPosition) <= Q.range then
				 --if HazMenu.Misc.Pak and VIP_USER then
				     --packetCast(_Q, CastPosition.x, CastPosition.z)
					--else
				    CastSpell(_Q, CastPosition.x, CastPosition.z)
				--end
			end   
		end
    end
end

--calcdmg----------------------------------------------------------------------------------------------------------

function calcDmg()
	for i=1, heroManager.iCount do
		local Target = heroManager:GetHero(i)
		if ValidTarget(Target) and Target ~= nil then
			qDmg = ((QREADY and getDmg("Q", Target, myHero)) or 0)
			wDmg = ((WREADY and getDmg("W", Target, myHero)) or 0)
			eDmg = ((EREADY and getDmg("E", Target, myHero)) or 0)
			rDmg = ((RREADY and getDmg("R", Target, myHero)) or 0)
			allDmg = (qDmg) + (wDmg)
			
			if Target.health > allDmg then
				KillText[i] = 1
			elseif Target.health <= allDmg then
				KillText[i] = 2
			end
		end
	end	
end

function LFCfunc()
	if not HazMenu.LFC.LagFree then _G.DrawCircle = _G.oldDrawCircle end
    if HazMenu.LFC.LagFree then _G.DrawCircle = DrawCircle2 end
end

-- Barasia, vadash, viseversa

function DrawCircleNextLvl(x, y, z, radius, width, color, chordlength)
	radius = radius or 300
	quality = math.max(8,round(180/math.deg((math.asin((chordlength/(2*radius)))))))
	quality = 2 * math.pi / quality
	radius = radius*.92
	local points = {}
	for theta = 0, 2 * math.pi + quality, quality do
		local c = WorldToScreen(D3DXVECTOR3(x + radius * math.cos(theta), y, z - radius * math.sin(theta)))
		points[#points + 1] = D3DXVECTOR2(c.x, c.y)
	end
	DrawLines2(points, width or 1, color or 4294967295)
end

function round(num) 
	if num >= 0 then return math.floor(num+.5) else return math.ceil(num-.5) end
end

function DrawCircle2(x, y, z, radius, color)
	local vPos1 = Vector(x, y, z)
	local vPos2 = Vector(cameraPos.x, cameraPos.y, cameraPos.z)
	local tPos = vPos1 - (vPos1 - vPos2):normalized() * radius
	local sPos = WorldToScreen(D3DXVECTOR3(tPos.x, tPos.y, tPos.z))
	if OnScreen({ x = sPos.x, y = sPos.y }, { x = sPos.x, y = sPos.y }) then
		DrawCircleNextLvl(x, y, z, radius, 1, color, HazMenu.LFC.CL) 
	end
end


--HPbar draws-------------------------------------------------------------------------------------------------


for i, enemy in ipairs(GetEnemyHeroes()) do
    enemy.barData = {PercentageOffset = {x = 0, y = 0} }
end

function GetEnemyHPBarPos(enemy)

    if not enemy.barData then
        return
    end

    local barPos = GetUnitHPBarPos(enemy)
    local barPosOffset = GetUnitHPBarOffset(enemy)
    local barOffset = Point(enemy.barData.PercentageOffset.x, enemy.barData.PercentageOffset.y)
    local barPosPercentageOffset = Point(enemy.barData.PercentageOffset.x, enemy.barData.PercentageOffset.y)

    local BarPosOffsetX = 169
    local BarPosOffsetY = 47
    local CorrectionX = 16
    local CorrectionY = 4

    barPos.x = barPos.x + (barPosOffset.x - 0.5 + barPosPercentageOffset.x) * BarPosOffsetX + CorrectionX
    barPos.y = barPos.y + (barPosOffset.y - 0.5 + barPosPercentageOffset.y) * BarPosOffsetY + CorrectionY 

    local StartPos = Point(barPos.x, barPos.y)
    local EndPos = Point(barPos.x + 103, barPos.y)

    return Point(StartPos.x, StartPos.y), Point(EndPos.x, EndPos.y)

end


function DrawIndicator(enemy)
	local Qdmg, Wdmg, Edmg, AAdmg = getDmg("Q", enemy, myHero), getDmg("W", enemy, myHero), getDmg("E", enemy, myHero), getDmg("AD", enemy, myHero)
	
	Qdmg = ((Q.IsReady and Qdmg) or 0)
	Edmg = ((E.IsReady and Edmg) or 0)
	Rdmg = ((R.IsReady and Rdmg) or 0)
	AAdmg = ((Aadmg) or 0)

    local damage = Qdmg + Edmg + Rdmg

    local SPos, EPos = GetEnemyHPBarPos(enemy)

    if not SPos then return end

    local barwidth = EPos.x - SPos.x
    local Position = SPos.x + math.max(0, (enemy.health - damage) / enemy.maxHealth) * barwidth

	DrawText("|", 16, math.floor(Position), math.floor(SPos.y + 8), ARGB(255,0,255,0))
    DrawText("HP: "..math.floor(enemy.health - damage), 12, math.floor(SPos.x + 25), math.floor(SPos.y - 15), (enemy.health - damage) > 0 and ARGB(255, 0, 255, 0) or  ARGB(255, 255, 0, 0))
end


--cardselections-------------------------------------------------------------------------------------------------



function castW()
    if ValidTarget(target) then 
	    local Name = myHero:GetSpellData(_W).name
		spellName = "goldcardlock"
		if Name == "PickACard" then
			CastSpell(_W)
		end
	    if Name == spellName then
		CastSpell(_W)
		SelectCard = nil
	    end
	end
end	


function castWblue()
    if ValidTarget(target) then 
	    local Name = myHero:GetSpellData(_W).name
		spellName = "bluecardlock"
		if Name == "PickACard" then
			CastSpell(_W)
		end
	    if Name == spellName then
		CastSpell(_W)
		SelectCard = nil
	    end
	end
end	


function castWred()
    
	    local Name = myHero:GetSpellData(_W).name
		spellName = "redcardlock"
		if Name == "PickACard" then
			CastSpell(_W)
		end
	    if Name == spellName then
		CastSpell(_W)
		SelectCard = nil
	    end
	
end	


function castWbluefarm()
    
	    local Name = myHero:GetSpellData(_W).name
		spellName = "bluecardlock"
		if Name == "PickACard" then
			CastSpell(_W)
		end
	    if Name == spellName then
		CastSpell(_W)
		SelectCard = nil
	    end
	
end

function castWg()
    
	    local Name = myHero:GetSpellData(_W).name
		spellName = "goldcardlock"
		if Name == "PickACard" then
			CastSpell(_W)
		end
	    if Name == spellName then
		CastSpell(_W)
		SelectCard = nil
	    end
	
end


------------------------------------------------------Zhonya--------------------------------------------------


function GetSlotItem(id, unit)
	
	unit 		= unit or myHero

	if (not ItemNames[id]) then
		return ___GetInventorySlotItem(id, unit)
	end

	local name	= ItemNames[id]
	
	for slot = ITEM_1, ITEM_7 do
		local item = unit:GetSpellData(slot).name
		if ((#item > 0) and (item:lower() == name:lower())) then
			return slot
		end
	end

end



function Zhonya()
	local Slot = GetInventorySlotItem(3157)
		if Slot ~= nil and myHero:CanUseSpell(Slot) == READY then
			local Range = 900
			local Amount = HazMenu.Misc.Amount
			local health = myHero.health
			local maxHealth = myHero.maxHealth
				if ((health/maxHealth)*100) <= HazMenu.Misc.zhonyaHP and CountEnemyHeroInRange(Range) >= Amount then
			CastSpell(Slot)
		end
	end
end


function CountEnemyHeroInRange(range)
	local enemyInRange = 0
		for i = 1, heroManager.iCount, 1 do
			local hero = heroManager:getHero(i)
				if ValidTarget(hero,range) then
			enemyInRange = enemyInRange + 1
			end
		end
	return enemyInRange
end



------------------------------------------------------------------------------------------------



"), nil, "bt", _ENV))()